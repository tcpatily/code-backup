var holidayContextRoot = "/tcHolidayRS/";
var commonRSContextRoot = "/tcCommonRS/";
var myAccountContextRoot = "/TcilMyAccount/";

function dateConvert(dateStr) {
    if (!dateStr) return "";
    const [day, month, year] = dateStr.split("-").map(Number);
    const date = new Date(year, month - 1, day);
    const monthNames = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
    ];
    return `${day} ${monthNames[date.getMonth()]}, ${year}`;
}

function getRoomAndAdultCounts(roomDetails) {
    let totalRooms = 1;
    let totalAdults = 1;
    if (Array.isArray(roomDetails)) {
        totalRooms = roomDetails.length;
        totalAdults = roomDetails.reduce(
            (sum, room) => sum + (room.noOfAdults || 0),
            0
        );
    }
    return { totalRooms, totalAdults };
}

function calculateAge(dobStr) {
    if (!dobStr) return null;
    const [day, month, year] = dobStr.split("-").map(Number);
    const dob = new Date(year, month - 1, day);
    const now = new Date();
    let age = now.getFullYear() - dob.getFullYear();
    const m = now.getMonth() - dob.getMonth();
    if (m < 0 || (m === 0 && now.getDate() < dob.getDate())) age--;
    return age;
}

function getGenderText(gender, age) {
    if (gender === "M" && age >= 18) return "Male";
    if (gender === "F" && age >= 18) return "Female";
    if (age < 18 && age > 1) return "Child";
    return "Infant";
}

function getIconSrc(gender, age) {
    if (age === null) return "";
    if (age >= 18) {
        if (gender === "M") return "/images/tcHolidays/common-img/user-icon-01.svg";
        if (gender === "F") return "/images/tcHolidays/common-img/user-icon-02.svg";
    } else if (age > 1 && age < 18) {
        if (gender === "M") return "/images/tcHolidays/common-img/user-icon-03.svg";
        if (gender === "F") return "/images/tcHolidays/common-img/user-icon-04.svg";
    } else {
        return "/images/tcHolidays/common-img/user-icon-05.svg";
    }
    return "";
}

function getLoggedInDetails() {
    let userDetailsObj = {
        user: "",
        custId: "",
        accountType: "",
        userId: ""
    };
    const userDetailsFamilyTreeStr = localStorage.getItem(
        "userDetailandFamilyTree"
    );
    if (
        userDetailsFamilyTreeStr != undefined &&
        userDetailsFamilyTreeStr != null &&
        userDetailsFamilyTreeStr != ""
    ) {
        const userDetailsFamilyTree = JSON.parse(userDetailsFamilyTreeStr);
        if (userDetailsFamilyTree != undefined && userDetailsFamilyTree != null) {
            console.log("User Details:", userDetailsFamilyTree);
            if (
                userDetailsFamilyTree.userDetail != undefined &&
                userDetailsFamilyTree.userDetail != null
            ) {
                const userDetails = userDetailsFamilyTree.userDetail;
                if (
                    userDetails.userTypeId != undefined &&
                    userDetails.userTypeId != null
                ) {
                    console.log("User is Customer -- " + userDetails.userTypeId);
                    if (userDetails.userTypeId == "Customer") {
                        userDetailsObj.user = "Customer";
                        userDetailsObj.custId = userDetails.custId;
                    } else if (userDetails.userTypeId == "Staff") {
                        userDetailsObj.user = "Staff";
                        userDetailsObj.accountType = userDetails.accountType == "TC" ? "TCIL" : "SOTC";
                        userDetailsObj.userId = userDetails.userId;
                    } else {
                        userDetailsObj.user = "";
                        userDetailsObj.custId = "";
                        console.log(
                            "User Type is neither Customer nor Staff -- " +
                            userDetails.userTypeId
                        );
                    }
                }
            }
        }
    }
    return userDetailsObj;
}



function formatCurrency(amount) {
    return new Intl.NumberFormat("en-IN", {
        style: "currency",
        currency: "INR",
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
    }).format(amount);
}

// -----------------------------------------
// Vue App
// -----------------------------------------


const travellersList = ref([]);
var savedTravellers = ref([]);
var traveller = ref({
    firstName: "",
    lastName: "",
    title: "",
    roomNo: 0,
    dob: "",
    passportNo: "",
    passportExpireDate: "",
    nameOnPanCard: "Lokesh Mayekar",
    dobOnPanCard: "16/12/1996",
    isPayer: "N",
    paymentPayer: "N",
    hotelRoomType: 0,
    panNumber: "AAAJD0430B",
    osi: "",
    travellerNo: 0,
    paxType: 0,
    gender: "",
    mealPreference: "",
    utilizedAmountByCust: 0,
    usedForFutureBookings: false,
    panMessage: "",
    panStatus: "",
    utilizedAmount: 0,
    canvasUtilizedAmount: 0,
    paxName: "",
    paxLabel: "",
    paxBedNote: "",

});




const custId = ref(0);


// New Code Start 
var travellers = [];
var roomDetails = ref([]);
const loggedInDetails = getLoggedInDetails();
const selectedTraveller = ref(1);
const selectedRoom = ref(1);
const travellersListForDisplay = ref([]);
let travellerNo = 1;

function travellersForRoom(roomNo) {
    console.log(roomNo);
    console.log(travellersListForDisplay.value.filter(t => t.roomNo === roomNo));
    return travellersListForDisplay.value.filter(t => t.roomNo === roomNo);
}

function syncTravellersListToDisplay() {
    if (!travellersList.value || travellersList.value.length === 0) return;

    travellersList.value.forEach(t => {
        const idx = travellersListForDisplay.value.findIndex(td => td.travellerNo === t.travellerNo);
        if (idx !== -1) {
            // Update existing entry
            Object.keys(t).forEach(key => {
                travellersListForDisplay.value[idx][key] = t[key];
            });
        } else {
            // Add new entry
            travellersListForDisplay.value.push({ ...t });
        }
    });
}

function buildTravellersListForDisplay(roomDetails) {
    const paxTypes = [
        { key: 'noOfAdults', label: 'Adult', type: 'adult', bedNote: null, paxType: 0 },
        { key: 'noOfCwb', label: 'Child', type: 'childWithBed', bedNote: 'With Bed', paxType: 1 },
        { key: 'noOfCnbJunior', label: 'Child', type: 'childWithoutBed', bedNote: 'Without Bed', paxType: 2 },
        { key: 'noOfCnbSenior', label: 'Child', type: 'childWithoutBed', bedNote: 'Without Bed', paxType: 4 },
        { key: 'noOfInfant', label: 'Infant', type: 'infant', bedNote: null, paxType: 3 }
    ];

    for (const room of roomDetails.value) {
        let childCounter = 1;
        for (const paxType of paxTypes) {
            for (let i = 0; i < room[paxType.key]; i++) {
                traveller.value.roomNo = room.roomNo;
                if (paxType.label === 'Child') {
                    traveller.value.paxName = `${paxType.label} ${childCounter}`;
                    traveller.value.paxLabel = `${paxType.label} ${childCounter}`;
                    childCounter++;
                } else {
                    traveller.value.paxName = `${paxType.label} ${i + 1}`;
                    traveller.value.paxLabel = `${paxType.label} ${i + 1}`;
                }
                traveller.value.paxType = paxType.paxType;
                traveller.value.paxBedNote = paxType.bedNote;
                traveller.value.travellerNo = travellerNo++;
                // Ensure errors object is present and reactive with all keys
                const errorKeys = [
                    'title', 'firstName', 'lastName', 'dob', 'mealPreference',
                    'nameOnPanCard', 'dobOnPanCard', 'panNumber', 'utilizedAmount'
                ];
                const errors = {};
                errorKeys.forEach(k => errors[k] = '');
                travellersListForDisplay.value.push({
                    ...traveller.value,
                    errors: { ...errors }
                });
            }
        }
    }

    travellersList.value.forEach(t => {
        travellersListForDisplay.value.forEach(td => {
            console.log("Comparing:", t.travellerNo, td.travellerNo);
        });
    });

    syncTravellersListToDisplay();
}

// Ensure only one traveller per room is marked as payer (isPayer === 'Y')
function ensureSinglePayer(roomNo, currentTravellerNo) {
    const paxInRoom = travellersListForDisplay.value.filter(t => t.roomNo === roomNo);
    const current = paxInRoom.find(p => p.travellerNo === currentTravellerNo);
    if (!current) return;
    if (current.isPayer === 'Y') {
        // Unset others
        paxInRoom.forEach(p => {
            if (p.travellerNo !== currentTravellerNo && p.isPayer === 'Y') {
                p.isPayer = 'N';
            }
        });
    }
}


const uniqueRoomNumbers = computed(() => {
    const roomsSet = new Set(travellersListForDisplay.value.map(t => t.roomNo));
    return Array.from(roomsSet);
});

function setActiveRoom(roomNo) {
    selectedRoom.value = roomNo;
    selectedTraveller.value = travellersListForDisplay.value.find(t => t.roomNo === roomNo).travellerNo;
}

function setActiveTraveller(travellerNo) {
    selectedTraveller.value = travellerNo;
    console.log("Active Traveller:", travellerNo);
    const paxForDisplay = travellersListForDisplay.value.filter(t => t.travellerNo === travellerNo);
    console.log("Selected Traveller:", paxForDisplay);

}
// New Code End 
const tdpData = ref(null);
const userAssignedBranch = ref([]);
const canvasAgentQuery = ref("");
const selectedAgent = ref("");
const selectedUserAssignedBranch = ref("");
const canvasAgentDetails = ref([]);
let selectDropDown = false;
createApp({

    setup() {
        // NEW: saved travellers decorated
        savedTravellers = computed(() => {
            const list = tdpData.value?.savedTravellersList || [];
            return list.map(decorateTraveller);
        });
        // Decorate traveller (NEW)
        function decorateTraveller(raw) {
            const age = calculateAge(raw.dob);
            return {
                ...raw,
                age,
                genderText: getGenderText(raw.gender, age),
                iconSrc: getIconSrc(raw.gender, age),
                fullName: `${raw.firstName || ""} ${raw.lastName || ""}`.trim(),
            };
        }

        const travellersWithAgeAndIcon = computed(() => savedTravellers.value);

        function selectSavedTraveller(selectedSavedTraveller) {
            console.log("Selected Traveller:", selectedSavedTraveller);
            const skipKeys = ["roomNo", "travellerNo"];
            travellersListForDisplay.value
                .filter(t => t.travellerNo === selectedTraveller.value)
                .forEach(t => {
                    console.log("Before update:", t);
                    Object.keys(t).forEach(key => {
                        if (
                            selectedSavedTraveller[key] !== undefined &&
                            !skipKeys.includes(key)
                        ) {
                            t[key] = selectedSavedTraveller[key];
                        }
                    });
                    console.log("After update:", t);
                });
        }


        // Existing refs
        const errorMessage = ref("");
        const totalRooms = ref();
        const totalAdults = ref();
        const quoteId = ref("");
        const gstStates = ref([]);
        const selectedGstState = ref('');
        const gstInData = ref({});
        const gstNumber = ref('');
        const summarySelectedRoom = ref(1);
        // --- Computed: Add Traveller Button Disabled ---
        const isAddTravellerDisabled = computed(() => {
            const pax = travellersListForDisplay.value.find(
                t => t.roomNo === selectedRoom.value && t.travellerNo === selectedTraveller.value
            );
            if (!pax) return true;
            if (!pax.errors) return true;

            // Determine required fields based on payer status
            const travellerFields = ['title', 'firstName', 'lastName', 'dob', 'mealPreference', 'passportNo', 'passportExpireDate'];
            const payerFields = ['nameOnPanCard', 'dobOnPanCard', 'panNumber', 'utilizedAmount'];

            const requiredFields = pax.isPayer === 'Y' ? payerFields : travellerFields;

            // Empty check only for required fields for current mode
            const hasEmpty = requiredFields.some(f => !pax[f] || !String(pax[f]).trim());
            // Error check only considers errors for current required fields
            const hasError = Object.entries(pax.errors || {})
                .filter(([key]) => requiredFields.includes(key))
                .some(([, val]) => !!val);
            // Require at least one payer in the room overall
            const roomHasPayer = travellersListForDisplay.value.some(t => t.roomNo === selectedRoom.value && t.isPayer === 'Y');

            return hasEmpty || hasError || !roomHasPayer;
        });
        const ismakePayementDisabled = ref(true);
        const isVerifyDisabled = ref(true);
        const isAmountApplyDisabled = ref(true);
        const contactDetails = reactive({
            title: '',
            firstName: '',
            lastName: '',
            mobNumber: '',
            emailId: '',
            address: '',
            pinCode: '',
            city: '',
            stateCode: '',
        });

        const errors = reactive({
            title: '',
            firstName: '',
            lastName: '',
            mobNumber: '',
            emailId: '',
            address: '',
            pinCode: '',
            city: '',
            stateCode: ''
        });

        const gstInDetails = ref({
            customerGSTIN: '',
            customerLegalName: '',
            customerLocation: '',
            customerPincode: '',
            customerStateCode: '',
            customerTradeName: '',
            customerBuildingNumber: '',
        });

        watch(contactDetails, () => {
            console.log(contactDetails.value)
        })

        watch(canvasAgentQuery, (val) => {
            console.log("v -- ", val);
            // Split by spaces, filter out empty strings
            if (val.length >= 3) {
                console.log("Fetching canvas agents for:", val);
                canvasAgentDetails.value = [];
                fetchCanvasAgent(val); // Call your API function here
            } else {
                canvasAgentDetails.value = [];
            }
        });


        // PAN / TCS
        var tcsResponse = ref();

        // Legacy array placeholder
        const travellersDetailsList = ref([]);

        async function getState() {
            try {
                console.log("Inside getState()");
                let url = commonRSContextRoot + 'tcilGstService/getGstStateCodes/4';
                const response = await doAxios({ method: "get", url });
                gstStates.value = response.data || [];

            } catch (err) {
                console.error("State fetch failed:", err);
            }
        }

        async function getGstDetails(gstNumber) {
            try {
                console.log("Inside getGstDetails()", gstNumber);
                let url = myAccountContextRoot + 'login/getGstInDetails/' + gstNumber;
                const response = await doAxios({
                    method: "get",
                    url: url,
                });
                gstInData.value = response.data || {};
                formatGstIn(gstInData.value);
                console.log("GSTIn Details:", gstInData.value);
            } catch (err) {
                console.error("GSTIn verification failed:", err);
            }
        }

        function formatGstIn(raw) {
            // raw expected shape: { gSTINDetails: { ... }, status: true }
            const src = raw && raw.gSTINDetails ? raw.gSTINDetails : null;
            if (!src) {
                clearGstInDetails();
                return;
            }
            const mapped = {
                customerGSTIN: src.customerGSTIN || '',
                customerLegalName: src.customerLegalName || '',
                customerLocation: src.customerLocation || '',
                customerPincode: src.customerPincode || '',
                customerStateCode: src.customerStateCode || '',
                customerTradeName: src.customerTradeName || '',
                customerBuildingNumber: src.customerBuildingNumber || '',
            };
            Object.assign(gstInDetails.value, mapped);
        }

        function clearGstInDetails() {
            Object.keys(gstInDetails.value).forEach(k => gstInDetails.value[k] = '');
        }

        // Copy selected saved contact into editable form model
        function onSelectSavedContact(contactDetailsObj) {
            contactDetails.value.firstName = contactDetailsObj.firstName;
            contactDetails.value.lastName = contactDetailsObj.lastName;
            contactDetails.value.title = contactDetailsObj.title;
            contactDetails.value.emailId = contactDetailsObj.emailId;
            contactDetails.value.mobNumber = contactDetailsObj.mobNumber;
            contactDetails.value.address = contactDetailsObj.address;
            contactDetails.value.city = contactDetailsObj.city;
            contactDetails.value.state = contactDetailsObj.state;
            contactDetails.value.pinCode = contactDetailsObj.pinCode;
            contactDetails.value.isSaved = contactDetailsObj.isSaved;
            contactDetails.value.stateCode = contactDetailsObj.stateCode;
        }

        // Existing fetch with additions
        async function getTdpData() {
            try {
                console.log("getTdpData()")
                const holidayPlus = getQueryParam("isHolidayPlus");
                let url =
                    holidayContextRoot +
                    `tdp?quotationId=${quoteId.value}&isHolidayPlus=${holidayPlus}&custId=${custId.value}`;
                const response = await doAxios({ method: "get", url });
                tdpData.value = response.data;
                roomDetails.value = tdpData.value?.tdpDetails?.roomDetails || [];
                travellersList.value = response.data?.travellersList || [];
                const result = getRoomAndAdultCounts(roomDetails.value);
                totalRooms.value = result.totalRooms;
                totalAdults.value = result.totalAdults;
                getState();
                buildTravellersListForDisplay(roomDetails);



                // Init indices
            } catch (err) {
                console.error("TDP fetch failed:", err);
            }
        }
        async function addTraveller() {
            let travellersRequestList = {};
            travellersRequestList.custId = custId.value;
            travellersRequestList.travellersDetailsList = travellersListForDisplay.value.filter(t => t.travellerNo <= selectedTraveller.value);

            console.log("travellersRequestList", travellersRequestList);
            travellerPayload = {
                custId: custId.value,
                travellersDetailsList: travellersRequestList.travellersDetailsList,
            };

            console.log("Adding traveller with payload:", travellerPayload);
            try {
                let url =
                    holidayContextRoot + `tdp/addPax?quotationId=${quoteId.value}`;
                const response = await doAxios({
                    method: "post",
                    data: travellerPayload,
                    url,
                });
                tdpData.value.travellersList = response.data;
                console.log("Response after adding traveller:", response.data);

            } catch (err) {
                console.error("addTraveller failed", err);
            }
        }
        //Code to toggle to next traveller starts
        function goToNextTraveller() {
            // Ordered list across all rooms
            const ordered = [...travellersListForDisplay.value]
                .sort((a, b) => a.roomNo - b.roomNo || a.travellerNo - b.travellerNo);

            const idx = ordered.findIndex(t => t.travellerNo === selectedTraveller.value);
            if (idx === -1) return;

            // Has next traveller
            if (idx < ordered.length - 1) {
                const next = ordered[idx + 1];
                // Switch room if needed then traveller
                setActiveRoom(next.roomNo);
                setActiveTraveller(next.travellerNo);
            } else {
                // Last traveller: show added list (attach class)
                const btn = document.querySelector('.finalAdd');
                if (btn) {
                    btn.classList.add('add_traveller');
                    console.log('Added class add_traveller to .finalAdd');
                } else {
                    console.warn('Final Add button not found (.finalAdd)');
                }
            }
        }

        async function onAddTravellerClick(pax) {
            validatePax(pax)
            // Call existing addTraveller (ignores pax arg)
            await addTraveller();
            goToNextTraveller();

        }
        //Code to toggle to next traveller ends

        function travellersByRoom(roomNo) {
            return travellersListForDisplay.value
                .filter(t => t.roomNo === roomNo)
                .sort((a, b) => a.travellerNo - b.travellerNo);
        }

        function travellerAge(t) {
            if (!t.dob) return null;
            return calculateAge(t.dob);
        }

        function travellerIcon(t) {
            const age = travellerAge(t);
            if (age === null || age === undefined) return "/images/tcHolidays/common-img/user-icon-05.svg";
            return getIconSrc(t.gender, age);
        }

        function editTraveller(t) {
            // open modal pre-select corresponding traveller
            setActiveRoom(t.roomNo);
            setActiveTraveller(t.travellerNo);
        }

        // Ensure after initial build we set summarySelectedRoom correctly
        watch(uniqueRoomNumbers, (rooms) => {
            if (rooms.length && !rooms.includes(summarySelectedRoom.value)) {
                summarySelectedRoom.value = rooms[0];
            }
        });

        // Existing PAN verify (trimmed logs)
        async function verifyPanCard(traveller) {
            console.log("Verifying PAN with:",
                traveller.nameOnPanCard,
                traveller.panNumber,
                traveller.dobOnPanCard
            );
            var request = {
                nameAsPerPan: traveller.nameOnPanCard,
                panCard: traveller.panNumber,
                dobAsPerPan: traveller.dobOnPanCard,
            };
            console.log("PAN Verification Request:", request);
            try {
                const response = await doAxios({
                    method: "post",
                    data: request,
                    url: holidayContextRoot + `tdp/verifyPanCard`,
                });
                console.log("PAN Verification Response:", response.data);
                if (response.data != null && response.data != undefined) {
                    console.log("PAN Verification Data:", response.data.panResponse);
                    if (
                        response.data.panResponse != null &&
                        response.data.panResponse != undefined
                    ) {
                        let verifyPanResponse = response.data.panResponse;
                        console.log("PAN Verification Details:", verifyPanResponse);
                        if (
                            verifyPanResponse.statusCode == 1 &&
                            verifyPanResponse.panStatus == "E" &&
                            verifyPanResponse.nameFlg == "Y" &&
                            verifyPanResponse.DOBFlg == "Y"
                        ) {
                            // PAN Verified Successfully
                            console.log("iNSIDE VERIFIED");
                            traveller.panMessage = "PAN Card Verified";
                            traveller.panStatus = "verified";
                        } else {
                            console.log("iNSIDE NOT VERIFIED");
                            if (verifyPanResponse.panStatus != "E") {
                                traveller.panMessage = "Invalid Pan Card";
                            } else if (verifyPanResponse.nameFlg != "Y") {
                                traveller.panMessage =
                                    "Name on PAN card mismatch, please correct and retry";
                            } else if (verifyPanResponse.DOBFlg != "Y") {
                                traveller.panMessage =
                                    "Date of Birth mismatch, please correct and retry";
                            } else {
                                traveller.panMessage =
                                    "PAN Verification Failed Contact US for more details ";
                            }
                            traveller.panStatus = "panError";
                        }
                    }
                    if (
                        response.data.utilizedAmountResponse != null &&
                        response.data.utilizedAmountResponse != undefined
                    ) {
                        traveller.canvasUtilizedAmount =
                            response.data.utilizedAmountResponse.utilAmtFinYearWise || 0;
                        console.log(
                            "canvasUtilized Amount Updated:",
                            traveller.canvasUtilizedAmount
                        );
                    }
                }
            } catch (err) {
                console.error("panResponse fetch failed:", err);
            }
        }

        async function calculateTcs(traveller) {
            if (traveller.panStatus == "verified") {
                console.log("utilizedAmount --- ", traveller.utilizedAmount);
                console.log("utilizedAmount --- ", traveller.utilizedAmount);
                console.log(
                    "canvasUtilizedAmount --- ",
                    traveller.canvasUtilizedAmount
                );
                const utilizedAmt = traveller.utilizedAmount.replaceAll(",", "");
                const tdpObj = tdpData.value.tdpDetails;
                console.log("TDP Details --- ", tdpObj);
                let jsonData = {
                    qId: quoteId.value,
                    utilizedAmount:
                        parseInt(utilizedAmt) + parseInt(traveller.canvasUtilizedAmount),
                    productId: tdpObj.productId,
                    totalAmount: tdpObj.totalPrice,
                    travellerDetailId: 1,
                };
                const res = await doAxios({
                    method: "post",
                    url: "tcHolidayRS/tdp/calculateTcs",
                    data: jsonData,
                });

                tcsResponse.value = res.data?.tcsResponse;
                console.log("TCS Response:", tcsResponse);
            } else {
                alert("Please verify PAN to calculate TCS");
            }
        }

        // NEW: Build booking payload for final booking API
        function buildBookingPayload() {
            if (!tdpData.value?.tdpDetails) {
                console.warn('TDP details not loaded');
                return null;
            }
            const paxTypeCodeMap = { adult: 0, childWithBed: 1, childWithoutBed: 2, infant: 3 };
            const positionCounters = {}; // roomNo -> { paxTypeCode: count }
            const travellersPayload = travellersListForDisplay.value
                .filter(t => t.travellerNo)
                .sort((a, b) => a.roomNo - b.roomNo || a.travellerNo - b.travellerNo)
                .map(tr => {
                    const roomNo = tr.roomNo;
                    const paxTypeCode = paxTypeCodeMap[tr.paxType] ?? 0;
                    if (!positionCounters[roomNo]) positionCounters[roomNo] = {};
                    positionCounters[roomNo][paxTypeCode] = (positionCounters[roomNo][paxTypeCode] || 0) + 1;
                    let gender = tr.gender;
                    if (!gender) {
                        if (["Mr", "Master"].includes(tr.title)) gender = 'M';
                        else if (["Mrs", "Ms"].includes(tr.title)) gender = 'F';
                        else gender = 'M';
                    }
                    const base = {
                        roomNo,
                        position: positionCounters[roomNo][paxTypeCode],
                        travellerNo: tr.travellerNo,
                        title: tr.title || '',
                        firstName: tr.firstName || '',
                        lastName: tr.lastName || '',
                        gender,
                        dob: tr.dob || '',
                        mealPreference: tr.mealPreference || '',
                        paxType: paxTypeCode,
                        aadhaarNumber: tr.aadhaarNumber || '',
                        isPayer: tr.isPayer ? 'Y' : 'N',
                        paymentPayer: 'N'
                    };
                    if (tr.isPayer) {
                        if (tr.panNumber) base.panNumber = tr.panNumber;
                        if (tr.nameOnPanCard) base.nameOnPanCard = tr.nameOnPanCard;
                        if (tr.dobOnPanCard) base.dobOnPanCard = tr.dobOnPanCard;
                    }
                    return base;
                });
            const firstPayer = travellersPayload.find(t => t.isPayer === 'Y');
            if (firstPayer) firstPayer.paymentPayer = 'Y';

            const cd = contactDetails.value;
            const bookingAmount = tdpData.value.tdpDetails.totalPrice || 0;
            const bookingType = 'F';
            const gstStateCode = cd.stateCode || ''; // can fallback to gstInDetails if needed
            let isUnionTerritory = 'N';
            const stateObj = gstStates.value.find(s => s.gstStateCode == gstStateCode);
            if (stateObj && stateObj.isUnionTerritory) isUnionTerritory = stateObj.isUnionTerritory; // expects 'Y'/'N'
            const payerWithPan = travellersPayload.find(t => t.panNumber);
            const panNo = payerWithPan?.panNumber || '';

            const payload = {
                addressId: 0,
                bookingAmount,
                bookingType,
                tcilHolidayBookingTravellerDetailCollection: travellersPayload,
                quotationId: quoteId.value,
                title: cd.title || '',
                firstName: cd.firstName || '',
                lastName: cd.lastName || '',
                addressEmailId: cd.emailId || '',
                addressPhoneNo: cd.mobNumber || '',
                addressStreet: cd.address || '',
                addressCity: cd.city || '',
                addressState: cd.state || '',
                addressPincode: cd.pinCode || '',
                packageId: tdpData.value.tdpDetails.pkgId,
                preConfirmationPageUrl: window.location.href,
                bookedForEmail: null,
                isOnBehalf: localStorage.getItem('onBehalf') || 'false',
                bookingThrough: sessionStorage.getItem('deviceType') || 'Desktop',
                gstStateCode,
                isUnionTerritory,
                gstinNo: gstInDetails.value.customerGSTIN || '',
                gstinName: gstInDetails.value.customerLegalName || '',
                panNo,
                branchCode: '',
                canvasAgentName: null,
                canvasAgentId: null
            };
            console.log('Booking payload built:', payload);
            return payload;
        }

        // NEW: Submit booking (POST)
        async function submitBooking() {
            if (validateField(field)) {
                const payload = buildBookingPayload();
                if (!payload) return;
                try {
                    const res = await doAxios({
                        method: 'post',
                        url: holidayContextRoot + 'holidayBooking',
                        data: payload
                    });
                    console.log('Booking success:', res.data);
                    window.location.href = "tcPaymentGateway?tid=" + res.data.tid;
                } catch (e) {
                    console.error('Booking failed:', e);
                    alert('Booking failed');
                }
            }
        }

        async function fetchUserAssignedBranch() {
            try {
                const req = { "createdBy": loggedInDetails.userId, "ldapCompany": loggedInDetails.accountType };
                const res = await doAxios({
                    method: "post",
                    url: holidayContextRoot + "preconfirmation/getUserAssignedBranch",
                    data: req,
                });
                userAssignedBranch.value = res?.data?.assignBranch?.split(",");

                console.log("User Assigned Branch:", userAssignedBranch.value);
            } catch (error) {
                console.log("Something went wrong while fetching user assigned branch");
            }

        }



        function validateField(field, event) {
            const value = contactDetails[field] ? contactDetails[field].trim() : "";

            // Stop invalid characters while typing
            if (event && event.type === "keypress") {
                const key = event.key;


                // Don’t allow numbers in name or city
                if (['firstName', 'lastName', 'city'].includes(field) && /[0-9]/.test(key)) {
                    event.preventDefault();
                    return;
                }

                // Don’t allow letters or symbols in number fields
                if (['mobNumber', 'pinCode'].includes(field) && /[^0-9]/.test(key)) {
                    event.preventDefault();
                    return;
                }

            }

            // Check each field
            if (field === "title") {
                errors.title = value ? "" : "Please select a title";
            }

            if (field === "firstName") {
                if (!value) errors.firstName = "Please enter first name";
                else if (!/^[A-Za-z ]+$/.test(value))
                    errors.firstName = "Only letters allowed";
                else errors.firstName = "";
            }

            if (field === "lastName") {
                if (!value) errors.lastName = "Please enter last name";
                else if (!/^[A-Za-z ]+$/.test(value))
                    errors.lastName = "Only letters allowed";
                else errors.lastName = "";
            }

            if (field === "mobNumber") {
                if (!value) errors.mobNumber = "Please enter mobile number";
                else if (!/^[789]\d{9}$/.test(value))
                    errors.mobNumber =
                        "Enter a valid 10-digit number starting with 7, 8, or 9";
                else errors.mobNumber = "";
            }

            if (field === "emailId") {
                if (!value) errors.emailId = "Please enter email";
                else if (!/^[^\s@]+@[^\s@]+.[^\s@]+$/.test(value))
                    errors.emailId = "Enter valid email";
                else errors.emailId = "";
            }

            if (field === "address") {
                errors.address = value ? "" : "Please enter address";
            }

            if (field === "pinCode") {
                if (!value) errors.pinCode = "Please enter pin code";
                else if (!/^\d{6}$/.test(value))
                    errors.pinCode = "Pin code must be 6 digits";
                else errors.pinCode = "";
            }

            if (field === "stateCode") {
                errors.stateCode = value ? "" : "Please select state";
            }

            if (field === "city") {
                if (!value) errors.city = "Please enter city";
                else if (!/^[A-Za-z ]+$/.test(value))
                    errors.city = "City can only contain letters";
                else errors.city = "";
            }

            // Disable button until everything is filled and valid
            const anyErrors = Object.values(errors).some((err) => err !== "");
            const missingFields = [
                "title",
                "firstName",
                "lastName",
                "mobNumber",
                "emailId",
                "address",
                "pinCode",
                "stateCode",
                "city",
            ].some((key) => !contactDetails[key] || !contactDetails[key].trim());

            ismakePayementDisabled.value = anyErrors || missingFields;
        }




function validatePax(pax, field = null) {
    if (!pax) return false;

    if (!pax.errors) pax.errors = {};
    const errors = pax.errors;

    const lettersOnly = val => val.replace(/[^A-Za-z ]/g, '');
    const numbersOnly = val => val.replace(/[^0-9]/g, '');
    const isPastDate = dateStr => {
        const date = new Date(dateStr);
        return !isNaN(date.getTime()) && date < new Date();
    };
    const isFutureDate = dateStr => {
        if (!dateStr) return false;
        const [day, month, year] = dateStr.split('-').map(Number);
        const date = new Date(year, month - 1, day);
        return !isNaN(date.getTime()) && date > new Date();
    };

    // Helper for field validation
    function validateField(f) {
        switch (f) {
            case 'title':
                errors.title = pax.title ? "" : "Please select a title";
                break;
            case 'firstName':
                if (!pax.firstName?.trim()) errors.firstName = "Please enter first name";
                else if (!/^[A-Za-z ]+$/.test(pax.firstName)) errors.firstName = "Only letters and spaces allowed";
                else {
                    errors.firstName = "";
                    pax.firstName = lettersOnly(pax.firstName);
                }
                break;
            case 'lastName':
                if (!pax.lastName?.trim()) errors.lastName = "Please enter last name";
                else if (!/^[A-Za-z ]+$/.test(pax.lastName)) errors.lastName = "Only letters and spaces allowed";
                else {
                    errors.lastName = "";
                    pax.lastName = lettersOnly(pax.lastName);
                }
                break;
            case 'dob':
                if (!pax.dob?.trim()) errors.dob = "Please enter DOB";
                else if (!isPastDate(pax.dob)) errors.dob = "DOB must be in the past";
                else errors.dob = "";
                break;
            case 'passportNo':
                if (!pax.passportNo?.trim()) errors.passportNo = "Please enter passport number";
                else if (!/^[A-Z][1-9][0-9]\d{4}[1-9]$/.test(pax.passportNo)) errors.passportNo = "Invalid passport number";
                else errors.passportNo = "";
                break;
            case 'passportExpireDate':
                if (!pax.passportExpireDate?.trim()) errors.passportExpireDate = "Please enter passport expiry date";
                else if (!isFutureDate(pax.passportExpireDate)) errors.passportExpireDate = "Enter a valid future date";
                else errors.passportExpireDate = "";
                break;
            case 'mealPreference':
                errors.mealPreference = pax.mealPreference ? "" : "Please select a meal preference";
                break;
            case 'nameOnPanCard':
                if (!pax.nameOnPanCard?.trim()) errors.nameOnPanCard = "Please enter name as per PAN card";
                else if (!/^[A-Za-z ]+$/.test(pax.nameOnPanCard)) errors.nameOnPanCard = "Only letters and spaces allowed";
                else {
                    errors.nameOnPanCard = "";
                    pax.nameOnPanCard = lettersOnly(pax.nameOnPanCard);
                }
                break;
            case 'dobOnPanCard':
                if (!pax.dobOnPanCard?.trim()) errors.dobOnPanCard = "Please enter DOB as per PAN card";
                else if (!isPastDate(pax.dobOnPanCard)) errors.dobOnPanCard = "DOB must be in the past";
                else errors.dobOnPanCard = "";
                break;
            case 'panNumber':
                if (!pax.panNumber?.trim()) errors.panNumber = "Please enter PAN number";
                else if (!/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/.test(pax.panNumber)) errors.panNumber = "Enter a valid PAN number";
                else errors.panNumber = "";
                break;
            case 'utilizedAmount':
                const val = pax.utilizedAmount || "";
                errors.utilizedAmount = !val.trim() ? "Please enter utilized amount" : (!isNaN(val) && Number(val) > 0 ? "" : "Enter a valid positive number");
                pax.isAmountApplyDisabled = !!errors.utilizedAmount;
                break;
        }
    }

    if (field) {
        validateField(field);
    } else {
        // If Payer checkbox is checked, validate only payer details fields
        if (pax.isPayer === 'Y') {
            [
                'nameOnPanCard', 'dobOnPanCard', 'panNumber', 'utilizedAmount'
            ].forEach(f => validateField(f));
        } else {
            // Otherwise, validate only traveller details fields
            [
                'title','firstName','lastName','mobNumber','emailId','dob','passportNo',
                'passportExpireDate','mealPreference'
            ].forEach(f => validateField(f));
        }
    }

    // Enable/disable PAN verify button
    pax.isVerifyDisabled = !!(errors.nameOnPanCard || errors.dobOnPanCard || errors.panNumber);

    // Enable/disable Add Traveller button
    let relevantFields = pax.isPayer === 'Y'
        ? ['nameOnPanCard', 'dobOnPanCard', 'panNumber', 'utilizedAmount']
        : ['title','firstName','lastName','mobNumber','emailId','dob','passportNo','passportExpireDate','mealPreference'];
    if (typeof isAddTravellerDisabled !== 'undefined') {
        isAddTravellerDisabled.value = relevantFields.some(f => errors[f]);
    }

    // Force Vue reactivity
    pax.errors = { ...errors };
}











        async function fetchCanvasAgent(searchStr) {
            console.log("Fetching canvas agents for:", searchStr);
            try {
                const res = await doAxios({
                    method: "get",
                    url: holidayContextRoot + "preconfirmation/autoSuggestAgent/" + searchStr,
                });
                canvasAgentDetails.value = res?.data || [];

            } catch (error) {
                console.log("Something went wrong while fetching canvas agent");
            }
        }

        function selectCanvasAgent(agent) {
            canvasAgentQuery.value = agent.agentName;
            canvasAgentDetails.value = [];
        }


        // Mount init
        onMounted(() => {
            quoteId.value = getQueryParam("qId");
            custId.value =
                loggedInDetails?.custId != "" ? loggedInDetails?.custId : 0;
            getTdpData();
            if (loggedInDetails.user === "Staff") {
                fetchUserAssignedBranch();
            }
        });

        watch(
            () => traveller.utilizedAmount,
            (newVal, oldVal) => {
                if (newVal === oldVal) return;
                console.log("changed Utilized Amount", oldVal, "->", newVal);
                tcsResponse.value = null; // reset (null clearer than {})
            }
        );

        watch(
            () => [
                traveller.nameOnPanCard,
                traveller.panNumber,
                traveller.dobOnPanCard,
            ],
            (newVals, oldVals) => {
                if (JSON.stringify(newVals) === JSON.stringify(oldVals)) return;
                console.log("changed pan card details", oldVals, "->", newVals);
                traveller.panStatus = "";
                traveller.panMessage = "";
                traveller.canvasUtilizedAmount = 0;
                tcsResponse.value = null;
            }
        );

        // Return (includes old + new)
        return {
            // Raw data
            tdpData,
            totalRooms,
            totalAdults,
            quoteId,
            // Rooms & travellers (NEW)
            selectedRoom,
            selectedTraveller,

            travellersDetailsList,

            // Traveller form
            traveller,
            verifyPanCard,
            calculateTcs,
            tcsResponse,
            addTraveller,
            dateConvert,
            formatCurrency,
            contactDetails,
            onSelectSavedContact,
            travellersListForDisplay,
            uniqueRoomNumbers,
            setActiveRoom,
            setActiveTraveller,
            travellersForRoom,
            travellersWithAgeAndIcon,
            gstStates,
            selectedGstState,
            getState,
            getGstDetails,
            gstInData,
            gstNumber,
            gstInDetails,
            loggedInDetails,
            selectSavedTraveller,
            savedTravellers,
            submitBooking, // NEW
            buildBookingPayload, // NEW
            goToNextTraveller,
            onAddTravellerClick,
            summarySelectedRoom,
            travellersByRoom,
            travellerAge,
            travellerIcon,
            editTraveller,
            fetchUserAssignedBranch,
            userAssignedBranch,
            selectedUserAssignedBranch,
            fetchCanvasAgent,
            canvasAgentQuery,
            selectedAgent,
            canvasAgentDetails,
            selectCanvasAgent,

            validateField,
            errorMessage,
            errors,
            isAddTravellerDisabled,
            validatePax,
            ismakePayementDisabled,
            isVerifyDisabled,
            isAmountApplyDisabled
        };
    },
}).mount(".tdpMount");
